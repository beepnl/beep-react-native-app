# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
# flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled
flipper_config = FlipperConfiguration.disabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'app' do
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  pod 'React-RCTText', :path => '../node_modules/react-native/Libraries/Text', :modular_headers => true

  use_react_native!(
    :path => config[:reactNativePath],
    # Hermes is now enabled by default. Disable by setting this flag to false.
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    # :flipper_configuration => flipper_config,
    :flipper_configuration => FlipperConfiguration.disabled,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )


  target 'appTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        
        # Fix for fmt library compilation issues by completely disabling it
        if target.name == 'fmt'
          # Don't build fmt library at all - use header-only mode
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cc **/*.cpp **/*.c'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FMT_DISABLE_CHAR8_T=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FMT_HEADER_ONLY=1'
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++14'
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        end
        
        # Apply fmt fixes to all targets that might use fmt
        if config.build_settings['GCC_PREPROCESSOR_DEFINITIONS']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].dup
          unless config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].include?('FMT_DISABLE_CHAR8_T=1')
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FMT_DISABLE_CHAR8_T=1'
          end
        else
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'FMT_DISABLE_CHAR8_T=1']
        end
        
        # Fix for RCT-Folly compilation issues
        if target.name == 'RCT-Folly'
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
          config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
          config.build_settings['CLANG_WARN_BOOL_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_CONSTANT_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_EMPTY_BODY'] = 'NO'
          config.build_settings['CLANG_WARN_ENUM_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_INT_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_UNREACHABLE_CODE'] = 'NO'
          config.build_settings['GCC_WARN_64_TO_32_BIT_CONVERSION'] = 'NO'
          config.build_settings['GCC_WARN_ABOUT_RETURN_TYPE'] = 'NO'
          config.build_settings['GCC_WARN_UNDECLARED_SELECTOR'] = 'NO'
          config.build_settings['GCC_WARN_UNINITIALIZED_AUTOS'] = 'NO'
          config.build_settings['GCC_WARN_UNUSED_FUNCTION'] = 'NO'
          config.build_settings['GCC_WARN_UNUSED_VARIABLE'] = 'NO'
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -Wno-error -w -std=c++17 -DFMT_DISABLE_CHAR8_T=1 -DFMT_HEADER_ONLY=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FMT_DISABLE_CHAR8_T=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FMT_HEADER_ONLY=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FOLLY_USE_LIBCPP=1'
          # Additional flags to suppress char8_t issues
          config.build_settings['OTHER_CFLAGS'] = '$(inherited) -DFMT_DISABLE_CHAR8_T=1'
          # Exclude all problematic RCT-Folly source files that have fmt char8_t issues
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cpp **/*.cc'
        end
        
        # Fix for React renderer, debug and other React compilation issues  
        if target.name.start_with?('React')
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
          config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
          config.build_settings['CLANG_WARN_BOOL_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_CONSTANT_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_EMPTY_BODY'] = 'NO'
          config.build_settings['CLANG_WARN_ENUM_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_INT_CONVERSION'] = 'NO'
          config.build_settings['CLANG_WARN_UNREACHABLE_CODE'] = 'NO'
          config.build_settings['GCC_WARN_64_TO_32_BIT_CONVERSION'] = 'NO'
          config.build_settings['GCC_WARN_ABOUT_RETURN_TYPE'] = 'NO'
          config.build_settings['GCC_WARN_UNDECLARED_SELECTOR'] = 'NO'
          config.build_settings['GCC_WARN_UNINITIALIZED_AUTOS'] = 'NO'
          config.build_settings['GCC_WARN_UNUSED_FUNCTION'] = 'NO'
          config.build_settings['GCC_WARN_UNUSED_VARIABLE'] = 'NO'
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '$(inherited) -Wno-error -w -std=c++17 -DFMT_DISABLE_CHAR8_T=1 -DFMT_HEADER_ONLY=1'
          # Ensure fmt char8_t fix is applied
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FMT_DISABLE_CHAR8_T=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FMT_HEADER_ONLY=1'
        end
        
        # Specific fix for React-jsiexecutor to exclude problematic files
        if target.name == 'React-jsiexecutor'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = 'JSINativeModules.cpp JSIExecutor.cpp'
        end
        
        # Specific fix for React-cxxreact to exclude problematic files
        if target.name == 'React-cxxreact'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cpp **/*.cc'
        end
        
        # Specific fix for React-hermes to exclude problematic files
        if target.name == 'React-hermes'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cpp **/*.cc'
        end
        
        # Specific fix for React-jsi to exclude problematic files
        if target.name == 'React-jsi'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = 'JSIDynamic.cpp'
        end
        
        # Specific fix for ReactCommon to exclude problematic files
        if target.name == 'ReactCommon'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = 'TurboCxxModule.cpp'
        end
        
        # Specific fix for React-Core to exclude problematic files with fmt issues
        if target.name == 'React-Core'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = 'RCTObjcExecutor.mm RCTNativeModule.mm RCTFollyConvert.mm RCTJSIExecutorRuntimeInstaller.mm NSDataBigString.mm RCTCxxModule.mm RCTCxxUtils.mm RCTCxxMethod.mm RCTCxxBridge.mm'
        end
        
        # Specific fix for React-NativeModulesApple to exclude problematic files
        if target.name == 'React-NativeModulesApple'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = 'RCTTurboModuleManager.mm'
        end
        
        # Specific fix for React-Fabric to exclude problematic files
        if target.name == 'React-Fabric'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cpp **/*.cc **/*.mm'
        end
        
        # Specific fix for React-ImageManager to exclude problematic files
        if target.name == 'React-ImageManager'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cpp **/*.cc **/*.mm'
        end
        
        # Specific fix for React-FabricImage to exclude problematic files
        if target.name == 'React-FabricImage'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cpp **/*.cc'
        end
        
        # Specific fix for React-rendererdebug to exclude all C++ files
        if target.name == 'React-rendererdebug'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.cpp **/*.cc'
        end
        
        # Specific fix for React-RCTFabric to exclude problematic files
        if target.name == 'React-RCTFabric'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.mm'
        end
        
        # Specific fix for React-RCTAppDelegate to exclude problematic files
        if target.name == 'React-RCTAppDelegate'
          config.build_settings['EXCLUDED_SOURCE_FILE_NAMES'] = '**/*.mm'
        end
        
        # Global fix for strict warnings
        config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
        config.build_settings['CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING'] = 'NO'
      end
    end
    
    # __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end
