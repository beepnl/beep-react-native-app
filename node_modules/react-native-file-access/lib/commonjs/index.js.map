{"version":3,"sources":["index.ts"],"names":["nextRequestId","registerFetchListener","requestId","resolve","reject","onProgress","listener","FileAccessEventEmitter","addListener","event","state","bytesRead","contentLength","done","remove","Error","message","headers","ok","redirected","status","statusText","url","FileSystem","appendFile","path","data","encoding","FileAccessNative","concatFiles","source","target","cp","cpAsset","asset","type","Platform","OS","cpExternal","targetName","dir","df","exists","fetch","resource","init","Promise","fetchManaged","cancel","cancelFetch","result","getAppGroupDir","groupName","hash","algorithm","isDir","ls","mkdir","mv","readFile","stat","statDir","unlink","unzip","writeFile","Dirs","NativeModules","RNFileAccess","getConstants"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport { FileAccessEventEmitter, FileAccessNative } from './native';\nimport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchEvent,\n  FetchInit,\n  FetchResult,\n  FileStat,\n  FsStat,\n  HashAlgorithm,\n  ManagedFetchResult,\n  ProgressListener,\n} from './types';\n\nexport type {\n  AssetType,\n  Encoding,\n  ExternalDir,\n  FetchResult,\n  FileStat,\n  FsStat,\n  HashAlgorithm,\n} from './types';\n\nexport { Util } from './util';\n\n/**\n * ID tracking next fetch request.\n */\nlet nextRequestId = 1;\n\n/**\n * Process fetch events for the request.\n */\nfunction registerFetchListener(\n  requestId: number,\n  resolve: (res: FetchResult) => void,\n  reject: (e: Error) => void,\n  onProgress?: ProgressListener\n) {\n  const listener = FileAccessEventEmitter.addListener(\n    'FetchEvent',\n    (event: FetchEvent) => {\n      if (event.requestId !== requestId) {\n        return;\n      }\n\n      if (event.state === 'progress') {\n        onProgress?.(event.bytesRead, event.contentLength, event.done);\n      } else if (event.state === 'error') {\n        listener.remove();\n        reject(new Error(event.message));\n      } else if (event.state === 'complete') {\n        listener.remove();\n        resolve({\n          headers: event.headers,\n          ok: event.ok,\n          redirected: event.redirected,\n          status: event.status,\n          statusText: event.statusText,\n          url: event.url,\n        });\n      }\n    }\n  );\n}\n\nexport const FileSystem = {\n  /**\n   * Append content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  appendFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.appendFile(path, data, encoding);\n  },\n\n  /**\n   * Append a file to another file.\n   *\n   * Returns number of bytes written.\n   */\n  concatFiles(source: string, target: string) {\n    return FileAccessNative.concatFiles(source, target);\n  },\n\n  /**\n   * Copy a file.\n   */\n  cp(source: string, target: string) {\n    return FileAccessNative.cp(source, target);\n  },\n\n  /**\n   * Copy a bundled asset file.\n   *\n   * When using Android asset type 'resource', include the folder, but skip the\n   * file extension. For example use 'raw/foo', for the file 'res/raw/foo.txt'.\n   * When possible, prefer using the 'assets/' folder; files in 'res/' have\n   * naming restrictions imposed by Android.\n   * https://developer.android.com/guide/topics/resources/providing-resources.html#OriginalFiles\n   */\n  cpAsset(asset: string, target: string, type: AssetType = 'asset') {\n    return Platform.OS === 'android'\n      ? FileAccessNative.cpAsset(asset, target, type)\n      : FileAccessNative.cpAsset(asset, target);\n  },\n\n  /**\n   * Copy a file to an externally controlled location.\n   *\n   * On Android API level < 29, may require permission WRITE_EXTERNAL_STORAGE.\n   */\n  cpExternal(source: string, targetName: string, dir: ExternalDir) {\n    return FileAccessNative.cpExternal(source, targetName, dir);\n  },\n\n  /**\n   * Check device available space.\n   */\n  df(): Promise<FsStat> {\n    return FileAccessNative.df();\n  },\n\n  /**\n   * Check if a path exists.\n   */\n  exists(path: string) {\n    return FileAccessNative.exists(path);\n  },\n\n  /**\n   * Save a network request to a file.\n   */\n  async fetch(\n    resource: string,\n    init: FetchInit,\n    onProgress?: ProgressListener\n  ): Promise<FetchResult> {\n    const requestId = nextRequestId++;\n    return new Promise((resolve, reject) => {\n      registerFetchListener(requestId, resolve, reject, onProgress);\n      FileAccessNative.fetch(requestId, resource, init);\n    });\n  },\n\n  /**\n   * Save a network request to a file.\n   */\n  fetchManaged(\n    resource: string,\n    init: FetchInit,\n    onProgress?: ProgressListener\n  ): ManagedFetchResult {\n    const requestId = nextRequestId++;\n    return {\n      cancel: () => FileAccessNative.cancelFetch(requestId),\n      result: new Promise((resolve, reject) => {\n        registerFetchListener(requestId, resolve, reject, onProgress);\n        FileAccessNative.fetch(requestId, resource, init);\n      }),\n    };\n  },\n\n  /**\n   * Return the local storage directory for app groups.\n   *\n   * This is an Apple only feature.\n   */\n  getAppGroupDir(groupName: string) {\n    if (Platform.OS !== 'ios' && Platform.OS !== 'macos') {\n      return Promise.reject(\n        new Error('AppGroups are available on Apple devices only')\n      );\n    }\n    return FileAccessNative.getAppGroupDir(groupName);\n  },\n\n  /**\n   * Hash the file content.\n   */\n  hash(path: string, algorithm: HashAlgorithm) {\n    return FileAccessNative.hash(path, algorithm);\n  },\n\n  /**\n   * Check if a path is a directory.\n   */\n  isDir(path: string) {\n    return FileAccessNative.isDir(path);\n  },\n\n  /**\n   * List files in a directory.\n   */\n  ls(path: string) {\n    return FileAccessNative.ls(path);\n  },\n\n  /**\n   * Make a new directory.\n   */\n  mkdir(path: string) {\n    return FileAccessNative.mkdir(path);\n  },\n\n  /**\n   * Move a file.\n   */\n  mv(source: string, target: string) {\n    return FileAccessNative.mv(source, target);\n  },\n\n  /**\n   * Read the content of a file.\n   */\n  readFile(path: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.readFile(path, encoding);\n  },\n\n  /**\n   * Read file metadata.\n   */\n  stat(path: string): Promise<FileStat> {\n    return FileAccessNative.stat(path);\n  },\n\n  /**\n   * Read metadata of all files in a directory.\n   */\n  statDir(path: string): Promise<FileStat[]> {\n    return FileAccessNative.statDir(path);\n  },\n\n  /**\n   * Delete a file.\n   */\n  unlink(path: string) {\n    return FileAccessNative.unlink(path);\n  },\n\n  /**\n   * Extract a zip archive.\n   */\n  unzip(source: string, target: string) {\n    return FileAccessNative.unzip(source, target);\n  },\n\n  /**\n   * Write content to a file.\n   *\n   * Default encoding of `data` is assumed utf8.\n   */\n  writeFile(path: string, data: string, encoding: Encoding = 'utf8') {\n    return FileAccessNative.writeFile(path, data, encoding);\n  },\n};\n\n/**\n * Directory constants.\n */\nexport const Dirs: {\n  /**\n   * Temporary files. System/user may delete these if device storage is low.\n   */\n  CacheDir: string;\n\n  /**\n   * System recommended location for SQLite files.\n   *\n   * Android only.\n   */\n  DatabaseDir?: string;\n\n  /**\n   * Persistent data. Generally user created content.\n   */\n  DocumentDir: string;\n\n  /**\n   * Persistent app internal data.\n   *\n   * iOS & MacOS only.\n   */\n  LibraryDir?: string;\n\n  /**\n   * App's default root directory.\n   */\n  MainBundleDir: string;\n\n  /**\n   * Root path to removable media. Prefer `cpExternal()` when possible, as\n   * Android discourages this access method.\n   *\n   * Android only.\n   */\n  SDCardDir?: string;\n} = NativeModules.RNFileAccess?.getConstants();\n"]}