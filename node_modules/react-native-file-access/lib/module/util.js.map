{"version":3,"sources":["util.ts"],"names":["regexEscape","literal","replace","normalizeSeparator","path","separator","sepRe","RegExp","splitPath","norm","dir","base","endsWith","substring","length","idx","lastIndexOf","Util","basename","dirname","extname","extIdx","sepIdx"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,WAAT,CAAqBC,OAArB,EAAsC;AACpC,SAAOA,OAAO,CAACC,OAAR,CAAgB,sBAAhB,EAAwC,MAAxC,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BC,IAA5B,EAA0CC,SAA1C,EAA6D;AAC3D,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAY,IAAGP,WAAW,CAACK,SAAD,CAAY,OAAtC,EAA8C,GAA9C,CAAd;AACA,SAAOD,IAAI,CAACF,OAAL,CAAaI,KAAb,EAAoBD,SAAS,CAACH,OAAV,CAAkB,KAAlB,EAAyB,MAAzB,CAApB,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASM,SAAT,CAAmBJ,IAAnB,EAAiCC,SAAjC,EAAoD;AAClD,MAAII,IAAI,GAAGN,kBAAkB,CAACC,IAAD,EAAOC,SAAP,CAA7B;;AACA,MAAII,IAAI,KAAKJ,SAAb,EAAwB;AACtB,WAAO;AAAEK,MAAAA,GAAG,EAAEL,SAAP;AAAkBM,MAAAA,IAAI,EAAE;AAAxB,KAAP;AACD;;AACD,MAAIF,IAAI,CAACG,QAAL,CAAcP,SAAd,CAAJ,EAA8B;AAC5BI,IAAAA,IAAI,GAAGA,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBJ,IAAI,CAACK,MAAL,GAAcT,SAAS,CAACS,MAA1C,CAAP;AACD;;AACD,QAAMC,GAAG,GAAGN,IAAI,CAACO,WAAL,CAAiBX,SAAjB,CAAZ;;AACA,MAAIU,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,WAAO;AAAEL,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,IAAI,EAAEF;AAAlB,KAAP;AACD;;AACD,SAAO;AACLC,IAAAA,GAAG,EAAED,IAAI,CAACI,SAAL,CAAe,CAAf,EAAkBE,GAAlB,CADA;AAELJ,IAAAA,IAAI,EAAEF,IAAI,CAACI,SAAL,CAAeE,GAAG,GAAGV,SAAS,CAACS,MAA/B;AAFD,GAAP;AAID;;AAED,OAAO,MAAMG,IAAI,GAAG;AAClB;AACF;AACA;AACEC,EAAAA,QAAQ,CAACd,IAAD,EAAeC,SAAS,GAAG,GAA3B,EAAgC;AACtC,WAAOG,SAAS,CAACJ,IAAD,EAAOC,SAAP,CAAT,CAA2BM,IAAlC;AACD,GANiB;;AAQlB;AACF;AACA;AACEQ,EAAAA,OAAO,CAACf,IAAD,EAAeC,SAAS,GAAG,GAA3B,EAAgC;AACrC,WAAOG,SAAS,CAACJ,IAAD,EAAOC,SAAP,CAAT,CAA2BK,GAAlC;AACD,GAbiB;;AAelB;AACF;AACA;AACEU,EAAAA,OAAO,CAAChB,IAAD,EAAeC,SAAS,GAAG,GAA3B,EAAgC;AACrC,UAAMgB,MAAM,GAAGjB,IAAI,CAACY,WAAL,CAAiB,GAAjB,CAAf;;AACA,QAAIK,MAAM,IAAI,CAAd,EAAiB;AACf,aAAO,EAAP;AACD;;AAED,UAAMC,MAAM,GAAGlB,IAAI,CAACY,WAAL,CAAiBX,SAAjB,CAAf;;AACA,QAAIiB,MAAM,KAAK,CAAC,CAAZ,IAAiBD,MAAM,GAAGC,MAAM,GAAGjB,SAAS,CAACS,MAAjD,EAAyD;AACvD,aAAOV,IAAI,CAACS,SAAL,CAAeQ,MAAM,GAAG,CAAxB,CAAP;AACD;;AACD,WAAO,EAAP;AACD;;AA7BiB,CAAb","sourcesContent":["/**\n * Escape for use as literal string in a regex.\n */\nfunction regexEscape(literal: string) {\n  return literal.replace(/[\\^$\\\\.*+?()[\\]{}|]/g, '\\\\$&');\n}\n\n/**\n * Condense consecutive separators.\n */\nfunction normalizeSeparator(path: string, separator: string) {\n  const sepRe = new RegExp(`(${regexEscape(separator)}){2,}`, 'g');\n  return path.replace(sepRe, separator.replace(/\\$/g, '$$$$'));\n}\n\n/**\n * Split path on last separator.\n */\nfunction splitPath(path: string, separator: string) {\n  let norm = normalizeSeparator(path, separator);\n  if (norm === separator) {\n    return { dir: separator, base: '' };\n  }\n  if (norm.endsWith(separator)) {\n    norm = norm.substring(0, norm.length - separator.length);\n  }\n  const idx = norm.lastIndexOf(separator);\n  if (idx === -1) {\n    return { dir: '.', base: norm };\n  }\n  return {\n    dir: norm.substring(0, idx),\n    base: norm.substring(idx + separator.length),\n  };\n}\n\nexport const Util = {\n  /**\n   * Get the file/folder name from the end of the path.\n   */\n  basename(path: string, separator = '/') {\n    return splitPath(path, separator).base;\n  },\n\n  /**\n   * Get the path containing the file/folder.\n   */\n  dirname(path: string, separator = '/') {\n    return splitPath(path, separator).dir;\n  },\n\n  /**\n   * Get the file extension.\n   */\n  extname(path: string, separator = '/') {\n    const extIdx = path.lastIndexOf('.');\n    if (extIdx <= 0) {\n      return '';\n    }\n\n    const sepIdx = path.lastIndexOf(separator);\n    if (sepIdx === -1 || extIdx > sepIdx + separator.length) {\n      return path.substring(extIdx + 1);\n    }\n    return '';\n  },\n};\n"]}