{"version":3,"file":"sum.js","sources":["../../../src/summary/sum.ts"],"sourcesContent":["import { fsum } from 'd3-array';\n\ntype SumOptions<T> = {\n  predicate?: (d: T, index: number, array: Iterable<T>) => boolean;\n};\n\n/**\n * Returns a function that computes the sum over an array of items\n * @param key A string key of the object or an accessor converting the object to a number\n */\nexport function sum<T extends object>(\n  key: keyof T | ((d: T, index: number, array: Iterable<T>) => number),\n  options?: SumOptions<T>\n) {\n  let keyFn =\n    typeof key === 'function' ? key : (d: T) => (d[key] as unknown) as number;\n\n  if (options?.predicate) {\n    const originalKeyFn = keyFn;\n    const predicate = options.predicate;\n    keyFn = (d: T, index: number, array: Iterable<T>) =>\n      predicate(d, index, array) ? originalKeyFn(d, index, array) : 0;\n  }\n\n  return (items: T[]) => fsum(items, keyFn);\n}\n"],"names":[],"mappings":";;aAWE,KACA;AAEA,MAAI,QACF,OAAO,QAAQ,aAAa,MAAM,CAAC,MAAU,EAAE;AAEjD,MAAI,mCAAS;AACX,UAAM,gBAAgB;AACtB,UAAM,YAAY,QAAQ;AAC1B,YAAQ,CAAC,GAAM,OAAe,UAC5B,UAAU,GAAG,OAAO,SAAS,cAAc,GAAG,OAAO,SAAS;AAAA;AAGlE,SAAO,CAAC,UAAe,KAAK,OAAO;AAAA;;;;"}