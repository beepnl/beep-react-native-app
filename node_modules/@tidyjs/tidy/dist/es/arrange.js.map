{"version":3,"file":"arrange.js","sources":["../../src/arrange.ts"],"sourcesContent":["import { ascending } from 'd3-array';\nimport { SingleOrArray, singleOrArray } from './helpers/singleOrArray';\nimport { Comparator, Key, KeyOrFn, TidyFn } from './types';\n\n/**\n * Sorts items\n * @param comparators Given a, b return -1 if a comes before b, 0 if equal, 1 if after\n */\nexport function arrange<T extends object>(\n  // note: had to switch to returning `any` instead of using Comparator<T> (returns number)\n  // for #49 - otherwise typescript failed to do type inference on accessors\n  comparators: SingleOrArray<Key | ((a: T, b: T) => any)>\n): TidyFn<T> {\n  const _arrange: TidyFn<T> = (items: T[]): T[] => {\n    // expand strings `key` to `asc(key)`\n    const comparatorFns = singleOrArray(comparators).map((comp) =>\n      typeof comp === 'function'\n        ? // length === 1 means it is an accessor (1 argument). convert to comparator via asc\n          comp.length === 1\n          ? asc(comp as (d: T) => unknown)\n          : (comp as Comparator<T>)\n        : asc<T>(comp)\n    );\n\n    return items.slice().sort((a, b) => {\n      for (const comparator of comparatorFns) {\n        const result = comparator(a, b);\n        if (result) return result;\n      }\n\n      return 0;\n    });\n  };\n\n  return _arrange;\n}\n\n/**\n * Creates an ascending comparator based on a key\n * @param key property key of T\n */\nexport function asc<T>(key: Key | ((d: T) => any)): Comparator<T> {\n  const keyFn = typeof key === 'function' ? key : (d: any) => d[key];\n\n  return function _asc(a: T, b: T) {\n    return emptyAwareComparator(keyFn(a), keyFn(b), false);\n  };\n}\n\n/**\n * Creates a descending comparator based on a key\n * @param key property key of T\n */\nexport function desc<T>(key: Key | ((d: T) => any)): Comparator<T> {\n  const keyFn = typeof key === 'function' ? key : (d: any) => d[key];\n  return function _desc(a: T, b: T) {\n    return emptyAwareComparator(keyFn(a), keyFn(b), true);\n  };\n}\n\n/**\n * Creates a comparator that sorts values based on a key\n * and a supplied array of the desired order for the values.\n * Items not found in the array will be sorted last.\n * @param order array of desired sort order\n */\nexport function fixedOrder<T>(\n  key: KeyOrFn<T>,\n  order: Array<T[keyof T]>,\n  options?: { position?: 'start' | 'end' }\n): (a: T, b: T) => number {\n  let { position = 'start' } = options ?? {};\n  const positionFactor = position === 'end' ? -1 : 1;\n\n  const indexMap = new Map();\n  for (let i = 0; i < order.length; ++i) {\n    indexMap.set(order[i], i);\n  }\n\n  const keyFn =\n    typeof key === 'function'\n      ? key\n      : (d: T) => (d[key as keyof T] as unknown) as any;\n\n  return function _fixedOrder(a: T, b: T) {\n    const aIndex: number = indexMap.get(keyFn(a)) ?? -1;\n    const bIndex: number = indexMap.get(keyFn(b)) ?? -1;\n\n    if (aIndex >= 0 && bIndex >= 0) {\n      return aIndex - bIndex;\n    }\n\n    if (aIndex >= 0) {\n      return positionFactor * -1;\n    }\n\n    if (bIndex >= 0) {\n      return positionFactor * 1;\n    }\n\n    return 0;\n  };\n}\n\nfunction emptyAwareComparator(aInput: any, bInput: any, desc: boolean) {\n  // we swap order to get descending behavior\n  let a = desc ? bInput : aInput;\n  let b = desc ? aInput : bInput;\n\n  // NaN, null, undefined is the order for emptys\n  if (isEmpty(a) && isEmpty(b)) {\n    const rankA = a !== a ? 0 : a === null ? 1 : 2;\n    const rankB = b !== b ? 0 : b === null ? 1 : 2;\n    const order = rankA - rankB;\n    return desc ? -order : order;\n  }\n\n  // keep empty values at the bottom\n  if (isEmpty(a)) {\n    return desc ? -1 : 1;\n  }\n  if (isEmpty(b)) {\n    return desc ? 1 : -1;\n  }\n\n  // descending is handled by swapping the a and b args at the start\n  return ascending(a, b);\n}\n\nfunction isEmpty(value: any) {\n  return value == null || value !== value /* NaN check */;\n}\n"],"names":[],"mappings":";;;iBAWE;AAEA,QAAM,WAAsB,CAAC;AAE3B,UAAM,gBAAgB,cAAc,aAAa,IAAI,CAAC,SACpD,OAAO,SAAS,aAEZ,KAAK,WAAW,IACd,IAAI,QACH,OACH,IAAO;AAGb,WAAO,MAAM,QAAQ,KAAK,CAAC,GAAG;AAC5B,iBAAW,cAAc;AACvB,cAAM,SAAS,WAAW,GAAG;AAC7B,YAAI;AAAQ,iBAAO;AAAA;AAGrB,aAAO;AAAA;AAAA;AAIX,SAAO;AAAA;aAOc;AACrB,QAAM,QAAQ,OAAO,QAAQ,aAAa,MAAM,CAAC,MAAW,EAAE;AAE9D,SAAO,cAAc,GAAM;AACzB,WAAO,qBAAqB,MAAM,IAAI,MAAM,IAAI;AAAA;AAAA;cAQ5B;AACtB,QAAM,QAAQ,OAAO,QAAQ,aAAa,MAAM,CAAC,MAAW,EAAE;AAC9D,SAAO,eAAe,GAAM;AAC1B,WAAO,qBAAqB,MAAM,IAAI,MAAM,IAAI;AAAA;AAAA;oBAWlD,KACA,OACA;AAEA,MAAI,CAAE,WAAW,WAAY,4BAAW;AACxC,QAAM,iBAAiB,aAAa,QAAQ,KAAK;AAEjD,QAAM,WAAW,IAAI;AACrB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE;AAClC,aAAS,IAAI,MAAM,IAAI;AAAA;AAGzB,QAAM,QACJ,OAAO,QAAQ,aACX,MACA,CAAC,MAAU,EAAE;AAEnB,SAAO,qBAAqB,GAAM;AApFpC;AAqFI,UAAM,SAAiB,eAAS,IAAI,MAAM,QAAnB,YAA0B;AACjD,UAAM,SAAiB,eAAS,IAAI,MAAM,QAAnB,YAA0B;AAEjD,QAAI,UAAU,KAAK,UAAU;AAC3B,aAAO,SAAS;AAAA;AAGlB,QAAI,UAAU;AACZ,aAAO,iBAAiB;AAAA;AAG1B,QAAI,UAAU;AACZ,aAAO,iBAAiB;AAAA;AAG1B,WAAO;AAAA;AAAA;AAIX,8BAA8B,QAAa,QAAa;AAEtD,MAAI,IAAI,QAAO,SAAS;AACxB,MAAI,IAAI,QAAO,SAAS;AAGxB,MAAI,QAAQ,MAAM,QAAQ;AACxB,UAAM,QAAQ,MAAM,IAAI,IAAI,MAAM,OAAO,IAAI;AAC7C,UAAM,QAAQ,MAAM,IAAI,IAAI,MAAM,OAAO,IAAI;AAC7C,UAAM,QAAQ,QAAQ;AACtB,WAAO,QAAO,CAAC,QAAQ;AAAA;AAIzB,MAAI,QAAQ;AACV,WAAO,QAAO,KAAK;AAAA;AAErB,MAAI,QAAQ;AACV,WAAO,QAAO,IAAI;AAAA;AAIpB,SAAO,UAAU,GAAG;AAAA;AAGtB,iBAAiB;AACf,SAAO,SAAS,QAAQ,UAAU;AAAA;;;;"}