#!/usr/bin/env node
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var coa = _interopRequireWildcard(require("coa"));

var fse = _interopRequireWildcard(require("fs-extra"));

var reactNativeSvgAppIcon = _interopRequireWildcard(require("./index"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Default values for CLI configuration. Custom values are merged on top.
 */
const defaultConfig = {
  backgroundPath: "./icon-background.svg",
  foregroundPath: "./icon.svg",
  platforms: ["android", "ios"],
  force: false
};

async function main(args = []) {
  console.log("Running react-native-svg-app-icon");
  const cliConfig = { ...defaultConfig,
    ...(await readFileConfig()),
    ...(await readArgsConfig(args))
  };
  cliConfig.platforms = cliConfig.platforms.map(platform => platform.toLowerCase());
  const generatedFiles = await reactNativeSvgAppIcon.generate({
    icon: {
      backgroundPath: (await fse.pathExists(cliConfig.backgroundPath)) ? cliConfig.backgroundPath : undefined,
      foregroundPath: cliConfig.foregroundPath
    },
    platforms: cliConfig.platforms,
    force: cliConfig.force
  });

  for await (const file of generatedFiles) {
    console.log("Wrote " + file);
  }

  console.log("Done");
}

async function readFileConfig() {
  try {
    const appJson = await fse.readJson("./app.json");
    return appJson.svgAppIcon || {};
  } catch (error) {
    return {};
  }
}

async function readArgsConfig(args) {
  return new Promise(resolve => coa.Cmd().name("react-native-svg-app-icon").helpful() // --background-path
  .opt().name("backgroundPath").title("Background path").long("background-path").end() // --foreground-path
  .opt().name("foregroundPath").title("Foreground path").long("foreground-path").end() // --platform
  .opt().name("platforms").title("Platform").long("platform").arr().end() // --force
  .opt().name("force").title("Force").long("force").short("f").flag().end().act(resolve).run(args.slice(2)));
}

if (require.main === module) {
  void main(process.argv);
}

var _default = main;
exports.default = _default;