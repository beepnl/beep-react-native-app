"use strict";

var path = _interopRequireWildcard(require("path"));

var fse = _interopRequireWildcard(require("fs-extra"));

var tmp = _interopRequireWildcard(require("tmp"));

var _cli = _interopRequireDefault(require("../cli"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe("cli", () => {
  const fixturesPath = path.join(__dirname, "fixtures");
  let tmpDir;
  beforeEach(() => {
    jest.spyOn(global.console, "log").mockImplementation();
    jest.spyOn(global.console, "debug").mockImplementation();
    tmpDir = tmp.dirSync({
      unsafeCleanup: true
    });
    process.chdir(tmpDir.name);
  });
  afterEach(() => {
    tmpDir.removeCallback();
  });
  it("fails on missing file", async () => {
    await expect((0, _cli.default)()).rejects.toThrow("no such file or directory");
  });
  it("does not fail for existing file", async () => {
    await fse.ensureDir(path.join("ios", "project", "Images.xcassets"));
    await fse.writeJson("app.json", {
      svgAppIcon: {
        backgroundPath: path.join(fixturesPath, "example", "icon-background.svg"),
        foregroundPath: path.join(fixturesPath, "example", "icon.svg")
      }
    });
    await expect((0, _cli.default)()).resolves.toBeUndefined();
  });
  it("reads icon path from arguments", async () => {
    await fse.ensureDir(path.join("ios", "project", "Images.xcassets"));
    await expect((0, _cli.default)(["/usr/local/bin/node", "cli.js", `--foreground-path=${path.join(fixturesPath, "example", "icon.svg")}`])).resolves.toBeUndefined();
  });
});